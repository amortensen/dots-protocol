<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.30 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC0768 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.0768.xml">
<!ENTITY RFC0791 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.0791.xml">
<!ENTITY RFC0793 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.0793.xml">
<!ENTITY RFC2119 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2460 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2460.xml">
<!ENTITY RFC2784 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2784.xml">
<!ENTITY RFC3031 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3031.xml">
<!ENTITY RFC5405 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5405.xml">
<!ENTITY RFC5246 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5246.xml">
<!ENTITY RFC5952 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5952.xml">
<!ENTITY RFC6555 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6555.xml">
<!ENTITY RFC6698 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.6698.xml">
<!ENTITY RFC7030 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7030.xml">
<!ENTITY RFC7159 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7159.xml">
<!ENTITY RFC7230 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7230.xml">
<!ENTITY RFC7231 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7231.xml">
<!ENTITY RFC7234 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7234.xml">
<!ENTITY RFC7540 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7540.xml">
<!ENTITY I-D.ietf-dots-architecture SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dots-architecture.xml">
<!ENTITY I-D.ietf-dots-requirements SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-dots-requirements.xml">
<!ENTITY I-D.hamilton-quic-transport-protocol SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml3/reference.I-D.hamilton-quic-transport-protocol.xml">
<!ENTITY I-D.rescorla-tls-dtls13 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml3/reference.I-D.rescorla-tls-dtls13.xml">
<!ENTITY RFC1518 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.1518.xml">
<!ENTITY RFC1519 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.1519.xml">
<!ENTITY RFC4559 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.4559.xml">
<!ENTITY RFC5575 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5575.xml">
<!ENTITY RFC7617 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.7617.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="no"?>
<?rfc symrefs="yes"?>

<rfc docName="draft-teague-dots-protocol-00" category="std">

  <front>
    <title>DDoS Open Threat Signaling Protocol</title>

    <author initials="N." surname="Teague" fullname="Nik Teague">
      <organization>Verisign, Inc.</organization>
      <address>
        <postal>
          <street>12061 Bluemont Way</street>
          <city>Reston, VA</city>
          <code>20190</code>
          <country>United States</country>
        </postal>
        <email>nteague@verisign.com</email>
      </address>
    </author>
    <author initials="A." surname="Mortensen" fullname="Andrew Mortensen">
      <organization>Arbor Networks, Inc.</organization>
      <address>
        <postal>
          <street>2727 S. State St</street>
          <city>Ann Arbor, MI</city>
          <code>48104</code>
          <country>United States</country>
        </postal>
        <email>amortensen@arbor.net</email>
      </address>
    </author>

    <date year="2016" month="November" day="01"/>

    <area>Security</area>
    <workgroup>DOTS</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes Distributed-Denial-of-Service (DDoS) Open Threat
Signaling (DOTS), a signaling protocol for requesting and managing mitigation of
DDoS attacks.</t>

<t>DOTS mitigation requests over the signal channel permit domains to signal the
need for help fending off DDoS attacks, setting the scope and duration of the
requested mitigation.  Elements called DOTS servers field the signals for help,
and enable defensive countermeasures to defend against the attack reported by
the clients, reporting the status of the delegated defense to the requesting
clients.  DOTS clients additionally may use the data channel to manage filters
and black- and white-lists to restrict or allow traffic to the clients&rsquo; domains
arbitrarily.</t>

<t>The DOTS signal channel may operate over UDP <xref target="RFC0768"></xref> and if necessary TCP
<xref target="RFC0793"></xref>.  This revision discusses a transport-agnostic approach to this
channel, focusing on the message exchanges and delegating transport specifics to
other documents.  The DOTS data channel operates over HTTPS or a transport with
similar reliability, interaction and security characteristics.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Distributed-Denial-of-Service attack scale and frequency continues to increase
year over year, and the trend shows no signs of abating <xref target="WISR"></xref>.  In response to
the DDoS attack trends, service providers and vendors have developed various
approaches to sharing or delegating responsibility for defense, among them ad
hoc service relationships, filtering through peering relationships
<xref target="COMMUNITYFS"></xref>, and proprietary solutions (<xref target="CLOUDSIGNAL"></xref>, <xref target="OPENHYBRID"></xref>).  Such
hybrid approaches to DDoS defense have proven effective, but the heterogeneous
methods employed to coordinate DDoS defenses across domain boundaries have
necessarily limited their scope and effectiveness, as the mechanisms in one
domain have no traction in another.</t>

<t>The DDoS Open Threat Signaling (DOTS) protocol provides a common mechanism to
achieve the coordinated attack response previously restricted to custom or
proprietary solutions.  To meet the needs of network operators facing down
modern DDoS attacks, DOTS itself is a hybrid protocol, consisting of a signal
channel and a data channel.  DOTS uses the signal channel, a lightweight and
robust communication layer, to signal the need for mitigation regardless of
network conditions, and uses the data channel, an HTTPS <xref target="RFC7230"></xref> based
communication layer with RESTful <xref target="REST"></xref> semantics, as vehicle for provisioning,
configuration, and filter management.</t>

<t>DOTS is not intended as a replacement for such protocols as BGP Flow
Specification <xref target="RFC5575"></xref> or as a general purpose mitigation application
programming interface (API), but rather as an advisory protocol enabling attack
response coordination between willing domains.  Any DOTS-enabled device or
service is capable of triggering a request for help and shaping the scope and
nature of that help, with the details of the actual mitigation left to the
discretion of the operators of the attack mitigators.  DOTS thereby permits all
participating parties to manage their own attack defenses in the manner most
appropriate for their own domains.</t>

<section anchor="terminology" title="Terminology">

<t>The key words &ldquo;MUST&rdquo;, &ldquo;MUST NOT&rdquo;, &ldquo;REQUIRED&rdquo;, &ldquo;SHALL&rdquo;, &ldquo;SHALL NOT&rdquo;, &ldquo;SHOULD&rdquo;,
&ldquo;SHOULD NOT&rdquo;, &ldquo;RECOMMENDED&rdquo;, &ldquo;MAY&rdquo;, and &ldquo;OPTIONAL&rdquo; in this document are to be
interpreted as described in <xref target="RFC2119"/>.</t>

<t>Terms used to define entity relationships, transmitted data, and methods of
communication are drawn from the terminology defined in
<xref target="I-D.ietf-dots-requirements"></xref>.</t>

</section>
</section>
<section anchor="architecture" title="Architecture">

<t>The architecture in which the DOTS protocol operates is assumed to be derived
from the architectural components and concepts described in
<xref target="I-D.ietf-dots-architecture"></xref>.</t>

<section anchor="dots-agents" title="DOTS Agents">

<t>All protocol communication is between a DOTS client and a DOTS server. The
logical agent termed a DOTS gateway is in practice a DOTS server placed
back-to-back with a DOTS client. As discussed in <xref target="I-D.ietf-dots-architecture"></xref>,
any interface enabling the back-to-back DOTS server and client to act as a DOTS
gateway is implementation-specific. This protocol is therefore concerned only
with managing one or more bilateral relationships between DOTS clients and the
DOTS servers, a signaling mode known as Direct Signaling in the DOTS
architecture. This is shown in <xref target="fig-proto-dir-sig"/> below:</t>

<figure title="DOTS protocol direct signaling" anchor="fig-proto-dir-sig"><artwork><![CDATA[
    +-----------+  signal channel  +-----------+
    |           |<---------------->|           |
    |DOTS client|                  |DOTS server|
    |           |<================>|           |
    +-----------+   data channel   +-----------+
]]></artwork></figure>

<t>The DOTS architecture anticipates many-to-one and one-to-many deployments, in
which multiple DOTS clients maintain distinct signaling sessions with a single
DOTS server or a single DOTS client maintains distinct signaling sessions with
multiple DOTS servers, as shown below in <xref target="fig-proto-mn-dir-sig"/>:</t>

<figure title="DOTS protocol direct signaling" anchor="fig-proto-mn-dir-sig"><artwork><![CDATA[
    +----+      +----+      +----+
    | c1 |      | Sa |------| c2 |
    +----+      +----+      +----+
          \                /
           \              /
            \   +----+   /
             +--| Sb |--+
                +----+

    DOTS        DOTS        DOTS
    client 1    servers     client 2
]]></artwork></figure>

<t>DOTS server Sb has signaling sessions with DOTS clients c1 and c2. DOTS client
c2 has signaling sessions with DOTS servers Sa and Sb. Except where explicitly
defined in this protocol, all mechanisms to maintain multiple signaling sessions
are left to the implementation.</t>

</section>
</section>
<section anchor="protocol-overview" title="Protocol Overview">

<t>The DOTS protocol consists of two channels, a signal channel and a data channel.
The signal channel is the minimal secure communication layer a DOTS client uses
to request mitigation for resources under the administrative control of the DOTS
client; the administrative control may be delegated. The data channel offers
DOTS client operators the limited ability to adjust configuration and filtering
for their mitigation requests.</t>

</section>
<section anchor="signal-channel" title="Signal Channel">

<t>The purpose of the signaling channel is to convey DDoS mitigation request and
status information between participating agents (client and server or gateway).
Conditions during a DDoS attack are invariably hostile for connection oriented
protocols traversing affected paths.  Mechanisms such as Happy Eyeballs
<xref target="RFC6555"></xref> may be used to select a transport suitable for a given time and
prevailing network conditions.  For the purpose of this draft, however, a
default signaling transport based upon UDP <xref target="RFC5405"></xref> will be used.  UDP&rsquo;s
connectionless quality lends itself to being able to sustain loose
communications during an event which may heavily congest certain network paths
towards the DOTS signal originating network.  Key tenets of DOTS protocol design
are low communication overhead and efficient message packing to increase the
chances of successful transmission and receipt.  Desirable side-effects of
efficient packing are the removal of the possibility of fragmentation in
addition to a message size that is friendly towards encapsulation (e.g via GRE
<xref target="RFC2784"></xref> or MPLS <xref target="RFC3031"></xref>).  Large UDP packets may also be treated adversely
by middleboxes with restrictive policies or may fall foul of aggressive
filtering.</t>

<t>In support of operational requirements for protocol efficiency in
<xref target="I-D.ietf-dots-requirements"></xref>, the signaling channel uses Protocol Buffers
<xref target="PROTOBUF"></xref>, also known as Protobufs, to encode messages exchanged between DOTS
agents. Thanks to Protobufs&rsquo; serialization, signal channel messaging permits the
introduction of new numbered fields arbitrarily, adding the requisite
extensibility to the protocol while retaining backward compatibility.
Future revisions of or extensions to the protocol may use the data channel to
provide a mechanism by which schema updates or expansions may be communicated
during provisioning/session establishment.</t>

<t>Data serialization alone does not cover the security requirements in
<xref target="I-D.ietf-dots-requirements"></xref> of peer mutual authentication (SEC-001), message
confidentiality (SEC-002), message replay protection (SEC-003) or message
integrity.  These qualities must be present in the transport over which the DOTS
protocol operates. Key distribution may be achieved via the data channel,
via an online mechanism such as DANE <xref target="RFC6698"></xref>, Enrollment over Secure Transport
<xref target="RFC7030"></xref>, or by out-of-band means.</t>

<section anchor="minimum-viable-information" title="Minimum Viable Information">

<t>DOTS is intended to be extensible and to evolve to meet the future needs in
communicaring as yet unknown threats. However, it must be able to convey the
minimum information required for an upstream mitigation platform to successfully
counter a DDoS attack.  A client may have limited visibility into the full
breadth of an attack and as such may not be well placed to provide useful
telemetry. DDoS sources may or may not be spoofed and number in the millions.
Once mitigation is active, the filtered traffic seen by the DOTS client (or
elements informing the DOTS client operator&rsquo;s decision to request mitigation)
may not be representative of the ongoing attack. This provides challenges for
the quality and usefulness of telemetry and mitigation/countermeasure
stipulations and as such this type of information if conveyed can only be
considered advisory.</t>

<t>In these instances the minimum viable information required for the majority of
mitigations to be activated is that which pertains to the resource being
targeted by the attack (host, prefix, protocol, port, URI etc.), per
<xref target="I-D.ietf-dots-requirements"></xref> (OP-006). The DOTS requirements also identify a
mitigation lifetime period (OP-005) and mitigation efficacy metric (OP-007).
The former may be considered for inclusion in the minimum viable information
set, however, the latter may only be relevant in updates.  An explicit
mitigation request/terminate flag is also required: a mitigation MUST be
explicitly requested by a DOTS client operator.  Finally, each message should
include a message id or sequence number field as well as a field for the last
received message id or sequence number.  These may then be compared by the
endpoints to assist in tracking state and/or identifying loss.</t>

</section>
<section anchor="signal-channel-messages" title="Signal Channel Messages">

<t>The DOTS protocol signal channel uses Protobufs to reduce the number of discrete
messages to just a single message superset per direction, with function defined
by the chosen fields contained within the message. The protocol therefore
defines a single schema each for the client and server sides containing all
relevant fields.  Tags 1 through 15 may benefit from only requiring a single
byte to encode (vs two for tags 16 through 2047) and these should be used for
frequently occurring message elements.</t>

<section anchor="client-message-schema" title="Client Message Schema">

<t>The entire client schema is detailed in <xref target="fig-client-schema"/>.  It is not
expected that client messages will require all fields to be used simultaneously
but instead a subset to convey a given signal type.  The only fields which may
be common to all signals are seqno and lastsvrseqno which may be used to detect
loss or drop outs. The DOTS client message schema is defined in
<xref target="fig-client-schema"/> below:</t>

<figure title="DOTS Client Message Schema" anchor="fig-client-schema"><artwork><![CDATA[
    syntax = "proto3";
    import "google/protobuf/any.proto";

    message DOTSClientMessage {
      // Client generated sequence number
      uint64 seqno = 1;

      // Sequence number of last received server message
      uint64 last_svr_seqno = 2;

      repeated DOTSMitigation mitigations = 3;

      // Request active mitigation list from server
      bool active = 4;

      // Ping request (operator initiated)
      bool ping = 5;

      // Per session configuration sent on signaling session init
      message DOTSSessionConfig {
        // Acceptable signal loss
        uint32 loss_limit = 1;

        // Maximum mitigation lifetime in seconds
        uint32 lifetime_max = 2;

        // Heartbeat interval in milliseconds
        uint32 heartbeat_interval = 3;
      }
      DOTSSessionConfig config = 6;

      repeated google.protobuf.Any extensions;
    }
]]></artwork></figure>

<section anchor="client-message-schema-fields" title="Client Message Schema Fields">

<t>The fields in the DOTS client signal channel message schema have the following
functions:</t>

<t><list style="hanging">
  <t hangText='seqno:'>
  a client-generated sequence number unique to the message. The client
increments the seqno value by one for each message sent over the signal
channel.</t>
  <t hangText='last_svr_seqno:'>
  the sequence number of the last message received from the server, provided to
the server as a simple way to detect lost messages.</t>
  <t hangText='mitigations:'>
  a list of mitigations requested or withdrawn by the client. The mitigation
schema fields are described below.</t>
  <t hangText='active:'>
  indicates a request for a list of active mitigations and their detail that are
current on the DOTS server.</t>
  <t hangText='ping:'>
  an operator initiated heartbeat like message which will ellicit a response
from the DOTS server.  This may be used to prove bi-directional communications
on an ad-hoc basis. For example, a DOTS ping may be used to prove keying
material on the DOTS client is valid and may be used to establish signaling
sessions with the DOTS server.</t>
  <t hangText='extensions:'>
  these fields may be used to communicate implementation specific details.  An
example would be the dissemination of filters between DOTS client and DOTS
server.</t>
</list></t>

</section>
</section>
<section anchor="client-mitigation-request-schema" title="Client Mitigation Request Schema">

<t>The schema for mitigation requests sent by the DOTS client is defined in
<xref target="fig-client-mit-request-schema"/> below:</t>

<figure title="DOTS Client Mitigation Request Schema" anchor="fig-client-mit-request-schema"><artwork><![CDATA[
    message DOTSMitigation {
      // Opaque client-generated event identifier
      string eventid = 1;

      // Toggle mitigation for the above scope
      bool requested = 2;

      // Mitigation scope as described in I-D.ietf-dots-requirements
      string scope = 3;

      // Lifetime of the requested mitigation.
      uint32 lifetime = 4;

      // Mitigation efficacy score as a float value between 0 and 1
      float efficacy = 5;

      repeated google.protobuf.Any extensions;
    }
]]></artwork></figure>

<section anchor="client-mitigation-request-schema-fields" title="Client Mitigation Request Schema Fields">

<t>The fields in the DOTS client mitigation request schema are as follows:</t>

<t><list style="hanging">
  <t hangText='eventid:'>
  an opaque client generated identifier that distinguishes a unique event or
incident. May be used by the client as a reference to the specific event
triggering a mitigation request, or for other implementation-specific
purposes.</t>
  <t hangText='requested:'>
  signals the need for mitigation to the DOTS server. If true, the DOTS client
is requesting mitigation for the provided scope. If false, the DOTS client is
indicating it does not require mitigation, and the DOTS server MUST cease the
mitigation for the provided scope.</t>
  <t hangText='scope:'>
  the scope of the mitigation requested, which may be any of the types described
in <xref target="I-D.ietf-dots-requirements"></xref>, such as Classless Internet Domain Routing
(CIDR) <xref target="RFC1518"></xref>,<xref target="RFC1519"></xref> prefixes, DNS names, or aliases defined by the
DOTS client operator through the data channel.</t>
  <t hangText='lifetime:'>
  the lifetime in seconds a mitigation request should be considered valid.</t>
  <t hangText='efficacy:'>
  a metric to convey to a DOTS server the perceived efficacy of an active
mitigation, per operational requirements in <xref target="I-D.ietf-dots-requirements"></xref>. The
mitigation efficacy is represented as a floating point value between 0 and 1,
with smaller values indicating lesser efficacy, and larger greater efficacy.
XXX - The efficacy value is calculated as</t>
  <t hangText='extensions:'>
  these fields may be used to provide implementation-specific mitigation
details.</t>
</list></t>

</section>
</section>
<section anchor="dots-server-message-schema" title="DOTS Server Message Schema">

<t>The entire server schema is detailed in <xref target="fig-server-schema"/>. DOTS server
messages use a subset of the available fields to convey the given signal type,
including additional relevant fields as necessary. The only fields which may
be common to all signals are seqno and last_client_seqno which may be used to
detect message loss or out-of-order delivery. When conveying mitigation
information, the server schema may bundle multiple mitigation status datasets
into a single message, provided this does not violate the required sub-MTU
message size <xref target="I-D.ietf-dots-requirements"></xref>.</t>

<figure title="DOTS Server Message Schema" anchor="fig-server-schema"><artwork><![CDATA[
    syntax = "proto3";
    import "google/protobuf/any.proto";

    message DOTSServerMessage {
      // Server generated sequence number
      uint64 seqno = 1;

      // Sequence number of last received Client message
      uint64 last_client_seqno = 2;

      // Request immediate heartbeat response from client.
      bool ping = 3;

      // Server error details, if available
      DOTSServerError error = 4;

      message DOTSRedirect {
        // Redirection target DOTS server address
        string target = 1;

        // Address family of redirection target
        enum RedirectionTargetType {
          DNSNAME = 0;
          IPV4 = 4;
          IPV6 = 6;
        }
        RedirectionTargetType target_type = 2;

        // Port on which to contact redirection target.
        // XXX Protobufs has no uint16 type, implementations
        // will need to sanity check.
        uint32 port = 3;
      }
      DOTSRedirect redirect = 5;

      // Mitigation data, limited by MTU
      repeated DOTSMitigationStatus mitigations = 6;
    }
]]></artwork></figure>

<section anchor="server-message-schema-fields" title="Server Message Schema Fields">

<t>The fields in the DOTS server signal channel message schema have the following
functions:</t>

<t><list style="hanging">
  <t hangText='seqno:'>
  a server generated sequence number unique to the message.</t>
  <t hangText='last_cli_seqno:'>
  the seqno of the last message received from the client.</t>
  <t hangText='ping:'>
  an operator-initiated heartbeat like message which will ellicit a response
from the DOTS client.  This may be used to prove bi-directional communications
on an ad-hoc basis.</t>
  <t hangText='error:'>
  details of an error caused by a DOTS client request.</t>
  <t hangText='redirect:'>
  Populated with the details of the redirection target DOTS server, if the DOTS
server is redirecting the DOTS client to another DOTS server.</t>
  <t hangText='mitigations:'>
  a list containing the status of mitigations requested by the DOTS client. The
fields in the mitigation status schema are described below.</t>
  <t hangText='extensions:'>
  these fields may be used to communicate implementation specific details.  An
example would be the communication of DNS mitigation vip to the DOTS client by
the DOTS server.</t>
</list></t>

</section>
</section>
<section anchor="server-error-schema" title="Server Error Schema">

<t>The schema for server error information is described in
<xref target="fig-server-error-schema"/> below:</t>

<figure title="DOTS Server Error Schema" anchor="fig-server-error-schema"><artwork><![CDATA[
    syntax = "proto3";
    import "google/protobuf/any.proto";

    message DOTSServerError {
      enum ErrorCode {
        NOERROR = 0,
        INVALID_VALUE = 1,
        MITIGATION_UNAVAILABLE = 2,
        MITIGATION_CONFLICT = 3,
        MALFORMED_MESSAGE = 4,
      }
      ErrorCode code = 1;

      // Error details, returned as a blob
      google.protobuf.Any details = 2;
    }
]]></artwork></figure>

<t>If a DOTS client message cannot be processed by the DOTS server, or for any
other reason causes an error, the DOTS server MUST populate the error field in
any response to the message causing the error. As the error response itself may
be lost, a DOTS client may continue sending problematic messages regardless of
the DOTS server&rsquo;s error notifications. DOTS server implementations MAY terminate
the signaling session after client-triggered errors exceed a threshold during
a time period equivalent to three times the session heartbeat interval.</t>

<t>The DOTS client message triggering the error condition is indicated in the
last_client_seqno value of the DOTS server message containing the error.</t>

<t>Errors may be one of the following types:</t>

<t><list style="hanging">
  <t hangText='NOERROR:'>
  Indicates the DOTS server has detected no error resulting from a DOTS client
message. Implementations MAY omit the error field entirely when no error
condition is present. This value is included in the schema largely to adhere
to the convention that an error status of 0 indicates success.</t>
  <t hangText='INVALID_VALUE:'>
  Indicates the DOTS client included an invalid value for a field in the client
message most recently received from the client. The DOTS server SHOULD include
specifics of the invalid value in the details field of the error.</t>
  <t hangText='MITIGATION_UNAVAILABLE:'>
  Indicates the DOTS server is unable to provide mitigation in response to a
mitigation request from the DOTS client.</t>
  <t hangText='MITIGATION_CONFLICT:'>
  Indicates a mitigation request conflicts with an existing mitigation from the
client. The DOTS server SHOULD populate the error details field with the
status information of the mitigation conflicting with the requested
mitigation.</t>
  <t hangText='MALFORMED_MESSAGE:'>
  Indicates the DOTS client message is malformed and cannot be processed.</t>
</list></t>

<section anchor="server-error-schema-fields" title="Server Error Schema Fields">

<t><list style="hanging">
  <t hangText='code:'>
  a numeric code categorizing the error type detected by the DOTS server.</t>
  <t hangText='details:'>
  specific information about the reason for the detected error.</t>
</list></t>

</section>
</section>
<section anchor="server-mitigation-status-schema" title="Server Mitigation Status Schema">

<t>The schema for the status of mitigations managed by the DOTS server are
described in <xref target="fig-server-mit-status-schema"/> below:</t>

<figure title="DOTS Server Mitigation Status Schema" anchor="fig-server-mit-status-schema"><artwork><![CDATA[
    syntax = "proto3";
    import "google/protobuf/any.proto";

    message DOTSMitigationStatus {
      // Opaque Client generated event identifier, used by DOTS client
      // to associate a mitigation status with the event triggering the
      // mitigation request.
      string eventid = 1;

      // Mitigation state
      bool enabled = 2;

      // Mitigation time-to-live (lifetime - (now - start))
      uint64 ttl = 3;

      // Dropped byte count
      uint64 bytes_dropped = 4;

      // Dropped bits per second
      uint64 bps_dropped = 5;

      // Dropped packet count
      uint64 pkts_dropped = 6;

      // Dropped packets per second
      uint64 pps_dropped = 7;

      // Blacklist enabled through data channel
      bool blacklist_enabled = 8;

      // Whitelist enabled through data channel
      bool whitelist_enabled = 9;

      // Filters enabled through data channel
      bool filters_enabled = 10;

      repeated google.protobuf.Any extensions = 11;
    }
]]></artwork></figure>

<section anchor="server-mitigation-status-schema-fields" title="Server Mitigation Status Schema Fields">

<t>The DOTS server message contains zero or more mitigation status messages, the
fields of which have the following functions:</t>

<t><list style="hanging">
  <t hangText='eventid:'>
  an opaque client generated identifier that distinguishes a unique event or
incident.</t>
  <t hangText='ttl:'>
  the remaining lifetime of the mitigation.</t>
  <t hangText='bytes_dropped:'>
  the total dropped byte count for the mitigation associated with eventid.</t>
  <t hangText='bps_dropped:'>
  the dropped bytes per second for the mitigation associated with eventid. This
value is expected to be calculated by the mitigator, and as such is
implementation-specific.</t>
  <t hangText='pkts_dropped:'>
  the total dropped packet count for the mitigation associated with eventid..</t>
  <t hangText='pps_dropped:'>
  the dropped packets per second for the mitigation associated with eventid.
This value is expected to be calculated by the mitigator, and as such is
implementation-specific.</t>
  <t hangText='blacklist_enabled:'>
  Indicates whether a blacklist of prohibited traffic sources is enabled for the
mitigation associated with eventid. The blacklist is managed through the data
channel.</t>
  <t hangText='whitelist_enabled:'>
  Indicates whether a whitelist of sources from which traffic must always be
allowed is enabled. The whitelist is managed through the data channel.</t>
  <t hangText='filters_enabled:'>
  Indicates whether client-specified traffic filters are enabled for the
mitigation associated with eventid.</t>
</list></t>

</section>
</section>
</section>
<section anchor="interactions" title="Interactions">

<section anchor="session-initialization" title="Session Initialization">

<t>Signaling sessions are initiated by the DOTS client. Session initialization
begins when the DOTS client connects to the DOTS server port, 4646 (the hex
value for the ASCII character &ldquo;.&rdquo; twice). After connecting, the DOTS client
establishes the channel security context, including all necessary cryptographic
exchanges between the two DOTS agents.</t>

<t>This signal channel specification is transport-agnostic, and delegates the
details of transport, including transport security, to transport-specific
documents. Regardless of transport, DOTS implementations nonetheless MUST
provide signal channel security meeting the requirements in
<xref target="I-D.ietf-dots-requirements"></xref>.</t>

<t>Once the signal channel security context is established, the DOTS client sends
a channel initialization message to the DOTS server, optionally including
signaling session configuration values; if the session configuration values are
excluded, defaults MUST be used for the signaling session. An example
initialization message setting the acceptable signal loss and heartbeat interval
for the signaling sessions is described in <xref target="fig-channel-init-message"/> below:</t>

<figure title="Signal Channel Initialization Message" anchor="fig-channel-init-message"><artwork><![CDATA[
    message DOTSClientMessage {
      1 (seqno) = %;
      2 (last_svr_seqno) = %;
      6 (config) = {
        1 (loss_limit) = %;
        3 (heartbeat_interval) = %;
      };
    }
]]></artwork></figure>

<t>The DOTS server MUST respond immediately by sending a heartbeat (see
<xref target="interactions-heartbeat"/> below) to the DOTS client. The signal channel is
active when the DOTS client receives a heartbeat from the DOTS server with a
last_client_seqno of a signal channel initialization message. Both DOTS agents
MUST begin sending heartbeats on the interval for the signaling session once the
session is active.</t>

<t>The following example assumes a DOTS implementation using UDP as the transport
and DTLS1.3 <xref target="I-D.rescorla-tls-dtls13"></xref>. In <xref target="fig-signal-channel-init"/> below, the
DOTS client uses the default values for acceptable signal loss, maximum
mitigation lifetime, and heartbeat interval. The initial DOTS server heartbeat
is lost, so the DOTS client sends another channel initialization message after
waiting for the minimum heartbeat interval defined below in
<xref target="interactions-heartbeat"/>:</t>

<figure title="Signal Channel Initialization" anchor="fig-signal-channel-init"><artwork><![CDATA[
   Client                           Server
     |                                 |
     |---UDP connect to Server:4646--->|
     |                                 |
     |<- - - -DTLS1.3 handshake- - - ->|
     |                                 |
     |----------ChannelInit----------->|  // Client sends signal
     |          seqno = 1              |  // channel init message
     |          last_svr_seqno = 0     |
     |                                 |
     |     X----HeartBeat--------------|  // Server immediately sends
     |          seqno = 1              |  // heartbeat reply, which
     |          last_client_seqno = 1  |  // is lost.
     |                                 |
     \ (min heartbeat interval passes) \
     /                                 /
     \                                 \
     |----------ChannelInit----------->|  // Client retries signal
     |          seqno = 2              |  // channel init message
     |          last_svr_seqno = 0     |
     |                                 |
     |<---------HeartBeat--------------|  // Server immediately sends
     |          seqno = 2              |  // heartbeat reply
     |          last_client_seqno = 2  |
     |                                 |
     |<==== Signal Channel Active ====>|
]]></artwork></figure>

<section anchor="session-initialization-error-handling" title="Session Initialization Error Handling">

<t>If the DOTS client specifies invalid values for the signal channel
configuration, the DOTS server replies with an error, and may ultimately
terminate the connection if the client fails to correct the invalid values, as
described in <xref target="I-D.ietf-dots-architecture"></xref>.</t>

</section>
<section anchor="mis-sequencing" title="Mis-Sequencing">

<t>In the event that the DOTS agent receives messages containing invalid seqno,
last_client_seqno or last_svr_seqno these should be discarded and ignored.</t>

</section>
</section>
<section anchor="interactions-heartbeat" title="Heartbeat">

<t>The most common message exchanged between a DOTS client and a DOTS server is a
heartbeat (OP-002 <xref target="I-D.ietf-dots-requirements"></xref>), which maintains and monitors
the health of the DOTS session.  This is achieved with simple, loosely-coupled
bi-directional messages containing the sending DOTS agent&rsquo;s message sequence
number and the sequence number the sending DOTS agent last received from its
peer. Due to the stress volumetric DDoS impose upon a network, a degree of loss
during attacks is to be expected. Message loss tolerance may be set on signal
channel establishment.</t>

<t>The default heartbeat interval is 20 seconds, plus or minus a number of
milliseconds between 50 and 2000. The number milliseconds MUST be randomized in
order to introduce jitter into the heartbeat interval, as recommended by
<xref target="RFC5405"></xref>. The default interval is derived from the recommendations in <xref target="RFC5405"></xref>
regarding middlebox traversal.</t>

<t>The interval between heartbeats is may also be set by the client when
establishing the signal channel. The minimum heartbeat interval is 15 seconds,
plus the random number of milliseconds as described above. The maximum heartbeat
interval is 120 seconds (two minutes), minus the random number of milliseconds
described above.</t>

<t>Heartbeats are loosely-coupled, meaning each DOTS agent in a bilateral signaling
session sends DOTS heartbeats on the specified interval, but asynchronously,
without acknowledgement. Each DOTS agent tracks heartbeats received from its
peer, and includes the sequence number of the last heartbeat received from the
peer agent in the next heartbeat sent, as shown in {fig-heartbeats}:</t>

<figure title="Heartbeats Between DOTS agents" anchor="fig-heartbeats"><artwork><![CDATA[
   Client                           Server
     |                                 |
     |----------HeartBeat------------->|  // Client heartbeat
     |          seqno = 1              |
     |          last_svr_seqno = 0     |
     |                                 |
     |<---------HeartBeat--------------|  // Server heartbeat
     |          seqno = 1              |
     |          last_client_seqno = 1  |
     |                                 |
     |----------HeartBeat------------->|  // Client heartbeat
     |          seqno = 2              |
     |          last_svr_seqno = 1     |
     |                                 |
     |      X---HeartBeat--------------|  // Server heartbeat lost
     |          seqno = 2              |
     |          last_client_seqno = 2  |
     |                                 |
     |----------HeartBeat------------->|  // Client heartbeat,
     |          seqno = 3              |  // last_svr_seqno remains 1,
     |          last_svr_seqno = 1     |  // indicating lost heartbeat
     |                                 |
     |<---------HeartBeat--------------|  // Server heartbeat resumes
     |          seqno = 3              |
     |          last_client_seqno = 3  |
     |                                 |
     |----------HeartBeat------------->|  // Client heartbeat,
     |          seqno = 4              |  // last_svr_seqno remains 1
     |          last_svr_seqno = 3     |
     |                                 |
]]></artwork></figure>

<t>The DOTS client heartbeat has the following format:</t>

<figure><artwork><![CDATA[
    message DOTSClientMessage {
      1 (seqno) = %;
      2 (last_svr_seqno) = %;
    }
]]></artwork></figure>

<t>The DOTS server heartbeat is identical aside from the schema type:</t>

<figure><artwork><![CDATA[
    message DOTSServerMessage {
      1 (seqno) = %;
      2 (last_svr_seqno) = %;
    }
]]></artwork></figure>

<t>Should the number of signals lost exceed the acceptable lossiness value for the
signaling session, the agent detecting the signal loss may consider the
signaling session lost. The default value for acceptable signal loss is 9,
which, when coupled with the default heartbeat interval, amounts to lack of
heartbeat from the peer DOTS agent for 180 seconds (three minutes).</t>

<section anchor="client-ping" title="Ping">

<t>There may be cases where a DOTS client or server operator wishes to trigger an
immediate heartbeat response in order to validate bi-directional communication
(e.g. during provisioning).  This ad-hoc triggering may be achieved by setting
the ping field set to TRUE. When DOTS agent receives a message on the signal
channel with the ping field set to TRUE, it MUST immediately send heartbeat back
to the ping sender. A ping reply MUST consist of only the senders sequence
number and the sequence number of the received ping. [[EDITOR&rsquo;S NOTE: rate
limiting of pings required?]]</t>

<t>A ping is identical to a standard heartbeat, but with the the ping field
included and set to true:</t>

<figure><artwork><![CDATA[
       message DOTSClientMessage {
         1 (seqno) = %;
         2 (last_svr_seqno) = %;
         5 (ping) = true;
       }
]]></artwork></figure>

</section>
</section>
<section anchor="mitigation-request-handling" title="Mitigation Request Handling">

<t>The mitigation request is the crux of the DOTS protocol, and is comprised of the
minimum viable information described in {minimum-viable-information}.  The
request may be augmented with additional implementation specific extensions
where these do not result in undue packet bloat.  The DOTS client may send
repeated requests until it receives a suitable response from the DOTS server by
which it may interpret successful receipt.</t>

<figure><artwork><![CDATA[
       message DOTSClientMessage {
         1 (seqno) = %;
         2 (last_svr_seqno) = %;
         3 (mitigations) = [
           {
             1 (eventid) = %;
             2 (requested) = %;
             3 (scope) = %;
             4 (lifetime) = %;
           }
         ];
       }
]]></artwork></figure>

<t>The DOTS server is expected to respond to confirm that it has accepted and or
rejected the mitigation request.  Upon receipt of the response the DOTS client
should cease sending additional initial requests for the same eventid.  If these
do not cease then the server may assume that the response was possibly lost and
should resend accordingly.  Acceptance status is communicated by the DOTS server
replying with the corresponding eventid and the enabled field set to 1 for
acceptance and 0 for rejection.  A rejection by the DOTS server should be
accompanied with an extension field detailing succinctly the reason (e.g. out of
contract, conflict, maintenance etc. ).</t>

<figure><artwork><![CDATA[
      message DOTSServerMessage {
        1 (seqno) = %;
        2 (last_cli_seqno) = %;
        4 (mitigations) = [
          {
            1 (eventid) = %;
            2 (enabled) = true; // Mitigation request accepted
          }
        ]
      }
]]></artwork></figure>

<t>After a period of time the mitigation request may expire and the DOTS server may
end the mitigation. Alternately, the DOTS client may explicitly terminate the
active mitigation by sending a message to the server that contains a mitigation
value with the eventid and that has the requested field set to false, as shown
below:</t>

<figure><artwork><![CDATA[
      message DOTSClientMessage {
        1 (seqno) = %;
        2 (last_svr_seqno) = %;
        3 (mitigations) = [
          {
            1 (eventid) = %;
            2 (requested) = false; // Terminate mitigation
          }
        ];
      }
]]></artwork></figure>

<t>The server must explicitly acknowledge the termination with a response message
with the enabled field now set to false:</t>

<figure><artwork><![CDATA[
      message DOTSServerMessage {
        1 (seqno) = %;
        2 (last_cli_seqno) = %;
        6 (mitigations) = [
          {
            1 (eventid) = %;
            2 (enabled) = false; // Mitigation terminated
          }
        ];
      }
]]></artwork></figure>

<t>The life cycle of a DOTS mitigation request resembles the following:</t>

<figure><artwork><![CDATA[
       Client                        Server
         |                              |
         |---Request(M=true)----------->|  // Mitigation request
         |                              |
         |<---------MitigationActive----|  // Server acceptance
         |                              |
         |< - - - - MitigationFeedback -|
         |                              |
         |---Terminate(M=false)-------->|  // Mitigation termination
         |                              |
         |<---------MitigationEnded-----|  // Server termination ack
]]></artwork></figure>

</section>
<section anchor="ancillary-messages" title="Ancillary Messages">

<t>In addition to the basic interaction, additional messages may be exchanged
throughout the lifetime of the mitigation. The following message types are
defined to provide requisite information between DOTS agents during an active
signaling session.</t>

<section anchor="mitigation-feedback" title="Mitigation Feedback">

<t>The DOTS server MUST update the client with current mitigation status. This MUST
include the eventid, and SHOULD include available dropped attack traffic
statistics provided by the mitigator. A DOTS server MAY provide feedback for
more than one mitigation in a single message, provided the resulting message
meets the sub-MTU size requirements in <xref target="I-D.ietf-dots-requirements"></xref>.</t>

<t>The DOTS client SHOULD use the feedback from the DOTS server when deciding to
update or terminate a mitigation request. For example, if the DOTS client learns
from DOTS server mitigation feedback that the dropped_pps rate is low, the DOTS
client might decide to terminate upstream mitigation and handle the attack
locally.</t>

<t>A mitigation feedback message from the DOTS server would resemble the following
format, assuming an active mitigation request from the DOTS client:</t>

<figure><artwork><![CDATA[
      message DOTSServerMessage {
        1 (seqno) = %;
        2 (last_client_seqno) = %;
        6 (mitigations) = [
          {
            1 (eventid) = %;
            2 (enabled) = %;
            3 (ttl) = %;
            4 (bytes_dropped) = %;
            5 (bps_dropped) = %;
            6 (pkts_dropped) = %;
            7 (pps_dropped) = %;
            10 (filters_enabled) = true;
          },
        ];
      }
]]></artwork></figure>

</section>
<section anchor="mitigation-lifetime-update" title="Mitigation Lifetime Update">

<t>The DOTS client may wish to update the mitigation during its lifetime.  Updates
may be to alter the lifetime to extend the mitigation, or an update may
communicate the perceived efficacy of the mitigation.  The former may be as a
result of the DOTS sever feedback which may suggest that an attack shows no sign
of abating.  The latter may be to notify the DOTS server whether the
countermeasures deployed are perceived as effective or not.</t>

<t>A DOTS client may update the lifetime of multiple mitigations in a single
request as long as the message size meets the sub-MTU requirement per
<xref target="I-D.ietf-dots-requirements"></xref>. The lifetime update message has the following
format:</t>

<figure><artwork><![CDATA[
       message DOTSClientMessage {
         1 (seqno) = %;
         2 (last_svr_seqno) = %;
         3 (mitigations) = [
           {
             1 (eventid) = %;
             2 (requested) = true;
             4 (lifetime) = %;
           }
         ];
       }
]]></artwork></figure>

<t>Upon receipt of the mitigation lifetime update, the DOTS server replace the
current mitigation expiration time with the new value. The updated lifetime MUST
be visible in the ttl field in subsequent mitigation feedback messages.  When
updating a mitigation lifetime, the DOTS client SHOULD continue sending the
lifetime update request at the heartbeat interval until the DOTS server&rsquo;s
mitigation feedback shows an updated ttl for the updated mitigation.</t>

</section>
<section anchor="mitigation-efficacy-updates" title="Mitigation Efficacy Updates">

<t>When a mitigation is active, a DOTS client MUST periodically communicate the
locally perceived efficacy of the mitigation to the DOTS server. This gives the
DOTS server a rough sense of whether the DOTS client perceives the mitigator&rsquo;s
deployed countermeasures as effective. The efficacy update update message has
the following format:</t>

<figure><artwork><![CDATA[
      message DOTSClientMessage {
        1 (seqno) = %;
        2 (last_svr_seqno) = %;
        3 (mitigations) = [
          {
            1 (eventid) = %;
            6 (efficacy) = %;
          }
        ];
      }
]]></artwork></figure>

<t>The DOTS server SHOULD consider the efficacy update an indication of the
effectiveness of any ongoing mitigations related to the eventid provided by the
DOTS client. The DOTS server nonetheless MAY treat any efficacy update from the
client as advisory, and is under no obligation to alter the mitigation strategy
in response.</t>

</section>
</section>
</section>
</section>
<section anchor="data-channel" title="Data Channel">

<section anchor="data-channel-role" title="Role">

<t>Using the conventions established in <xref target="REST"></xref>, the data channel provides an
interface for configuration, black- and white-list management, traffic filter
management, and extensibility required for future operator needs (GEN-001
<xref target="I-D.ietf-dots-requirements"></xref>).</t>

</section>
<section anchor="data-channel-limitations" title="Limitations">

<t>Unlike the DOTS signal channel, the data channel potentially offers DOTS client
operators limited direct control over the behavior of mitigations requested by
the DOTS client. However, the DOTS data channel is not a general purpose
application programming interface for mitigators with which a DOTS server is
communicating. Certain countermeasure profiles for DDoS attacks are widely
understood and deployed, but many remain specific to mitigation vendor
implementations, making abstraction all but impossible. The DOTS data channel in
this protocol is therefore focused on a limited subset of widely available and
well understood mitigation actions, namely black- and white-listing, and
rate-limiting.</t>

<t>While managing filters and rate-limit policy over the DOTS data channel
resembles the dissemination of flow specifications with a match and action on
match in <xref target="RFC5575"></xref>, the similarity is restricted to <xref target="RFC5575"></xref>&rsquo;s traffic-rate
action only in order to prevent a DOTS client from exerting influence over
traffic not destined for the DOTS client&rsquo;s domain.</t>

</section>
<section anchor="data-channel-transport" title="Transport">

<t>The DOTS data channel relies on the semantics described in <xref target="REST"></xref>, meaning any
reliable application protocol enabling those semantics could be used. This
document anticipates HTTP/1.1 over TLS <xref target="RFC7230"></xref> will be most widely deployed at
the time of writing. Implementations of the DOTS protocol therefore MUST support
data channels using HTTP/1.1 over TLS. However, this document also leaves open
the possibility that the data channel MAY be implemented through such
application transports as HTTP/2 <xref target="RFC7540"></xref> or the Quick UDP Internet Connection
<xref target="I-D.hamilton-quic-transport-protocol"></xref> protocol, as well as other current and
future protocols supporting <xref target="REST"></xref> semantics and the security requirements
described in <xref target="I-D.ietf-dots-requirements"></xref>. Support for alternative secure REST
transports for the data channel are deployment- and implementation-specific.</t>

<t>DOTS data channel implementations MUST support the IPv4 <xref target="RFC0791"></xref> and IPv6
<xref target="RFC2460"></xref> protocols, and MUST support the &ldquo;Happy Eyeballs&rdquo; algorithm for dual
stack deployments discussed in <xref target="RFC6555"></xref>.</t>

<t>Implementations of the DOTS data channel MUST use TLS version 1.2 or higher.
DOTS agents MUST NOT create a data channel with a peer agent requesting a lower
TLS version, and SHOULD drop the connection immediately on detecting the peer
DOTS agent does not support a required TLS version.</t>

<t><xref target="security-considerations"/> offers a more detailed discussion of data channel
transport security, including cipher suites.</t>

</section>
<section anchor="data-channel-authentication" title="Authentication">

<t>When establishing the data channel, the DOTS client and DOTS server MUST
mutually authenticate each other, per SEC-001 in <xref target="I-D.ietf-dots-requirements"></xref>.
A common method for mutual authentication for HTTP/1.1 over TLS is an exchange
of X.509 certificates between client and server during the TLS handshake
<xref target="RFC5246"></xref>; similar mechanisms exist in HTTP/2 <xref target="RFC7540"></xref> and in
<xref target="I-D.hamilton-quic-transport-protocol"></xref>.</t>

<t>Regardless of the underlying transport used, this document does not prescribe
the method of mutual authentication, and alternatives may include a mix of
things like basic auth <xref target="RFC7617"></xref> and HTTP SPNEGO <xref target="RFC4559"></xref>. The method of mutual
authentication used for the data channel is left to the discretion of the DOTS
server operator.  Additional discussion of mutual authentication is below in
<xref target="security-considerations"/>.</t>

</section>
<section anchor="data-channel-authorization" title="Authorization">

<t>TBD deployment-specific, see also security considerations.</t>

</section>
<section anchor="data-channel-resources" title="Resources">

<t>The DOTS server exposes data channel resources to the DOTS client as uniform
resource identifiers. The DOTS client sends requests related to the data channel
resources using the verbs defined in <xref target="RFC7231"></xref>: GET, POST, PUT, PATCH and
DELETE. The DOTS server responds to the DOTS client requests with a status code
and, if the request succeeded, available data returned by the request. The
status codes used in DOTS server responses are also defined in <xref target="RFC7231"></xref>.</t>

<section anchor="resource-root" title="Resource Root">

<t>The root resource or endpoint in the DOTS data channel is /dots/v1/data. The
root resource MUST be prefixed to all resources exposed through the data
channel.</t>

</section>
<section anchor="datarootsessions" title="{+dataroot}/sessions">

<t>The /sessions endpoint is a read-only resource from which the DOTS client may
request the status of signaling sessions.</t>

<section anchor="get-datarootsessions" title="GET {+dataroot}/sessions">

<t>The DOTS client requests the list of signaling sessions by issuing a GET for the
/sessions resource:</t>

<figure title="DOTS Client Requesting Session Status" anchor="eg-client-status"><artwork><![CDATA[
    GET /dots/v1/data/sessions HTTP/1.1
    Host: dots-server.example.com
    Accept: application/json
]]></artwork></figure>

<t>If the DOTS client is authorized, the DOTS server responds to the GET with a
list of signaling session identifiers, as in the following example:</t>

<figure><artwork><![CDATA[
    HTTP/1.1 200 OK
    Cache-Control: no-cache
    Content-Type: application/json

    {
        "sessions": [
            {
                "id": <string>,
                "client": <ip_address>,
                "server": <ip_address>,
                "duration": <iso8601_duration>,
            },
            {
                ...
            }
        ]
    }
]]></artwork></figure>

<t>The top-level JSON key-value pairs in the response are as follows:</t>

<t><list style="hanging">
  <t hangText='sessions:'>
  A list of dictionary objects describing active signaling sessions.  If empty,
no signaling sessions are active.</t>
</list></t>

<t>Each dictionary within the sessions list contains the following JSON key-value
pairs:</t>

<t><list style="hanging">
  <t hangText='id:'>
  An opaque alphanumeric string identifying the signaling session.</t>
  <t hangText='client:'>
  The dotted-quad IPv4 or formatted IPv6 address <xref target="RFC5952"></xref> of the DOTS client in
the signaling session.</t>
  <t hangText='server:'>
  The dotted-quad IPv4 or formatted IPv6 address <xref target="RFC5952"></xref> of the DOTS server in
the signaling session.</t>
  <t hangText='duration:'>
  An ISO 8601 representation of the duration of the signaling session.</t>
</list></t>

</section>
</section>
<section anchor="datarootfilters" title="{+dataroot}/filters">

<t>The /filters endpoint on a DOTS server is a read-write resource through which
a DOTS client may request that the DOTS server add, retrieve, modify and delete
traffic filters to an active mitigation requested through the signal channel.</t>

<t>DOTS servers SHOULD indicate lack of support for filtering by returning a 501
Not Implemented status to any request for a filters URI. If a DOTS client
attempts to apply a filter to flows which the DOTS server determines do not
belong to the DOTS client, the DOTS server MUST respond with a 403 Forbidden.</t>

<t>A filter is a match and an action on match. As discussed above in
<xref target="data-channel-limitations"/>, actions are restricted to black- and white-listing
and rate-limiting. Matches in a filter dictionary may be any of the match types
discussed below. All matches MUST include a destination address or identifier;
DOTS server implementations MUST NOT accept filters missing a destination
address or prefix.</t>

<t>A filter can be represented as a map or dictionary with the following
attributes:</t>

<t><list style="hanging">
  <t hangText='id:'>
  a client-generated integer value acting as a unique identifier for the filter.</t>
  <t hangText='af:'>
  address family of the flow to filter, must be one of &ldquo;ipv4&rdquo; or &ldquo;ipv6&rdquo;. This
attribute is required in all filters.</t>
  <t hangText='src:'>
  source prefix of the flow(s) to filter.</t>
  <t hangText='sport:'>
  source port of the flow(s) to filter.</t>
  <t hangText='dst:'>
  destination prefix of the flow(s) to filter.</t>
  <t hangText='dport:'>
  destination port of the flow(s) to filter.</t>
  <t hangText='action:'>
  The action to apply to flows matching the filter. The action MUST be one of
&ldquo;blacklist&rdquo; (i.e., drop all matching flows), &ldquo;whitelist&rdquo; (i.e., always forward
traffic matching the filter), or &ldquo;rate-limit&rdquo; (i.e., control the rate of
traffic matching the filter).</t>
  <t hangText='Bps:'>
  an integer value setting the bytes per second limit for flows matching the
filter when action is &ldquo;rate-limit&rdquo;.</t>
</list></t>

<section anchor="post-datarootfiltersmitigation-id" title="POST {+dataroot}/filters/{+mitigation-id}">

<t>A POST request over the data channel to the /filters endpoint on a DOTS server
permits a DOTS client to manage filtering policy for a mitigation:</t>

<figure title="Filter creation" anchor="fig-filter-creation"><artwork><![CDATA[
    POST /dots/v1/data/filters/42 HTTP/1.1
    Host: dots-server.example.com
    Accept: application/json
    Content-Type: application/json
    Content-Length: NNNN

    {
        "filters": [
            {
                "id": 1,
                "af": "ipv4",
                "src": "192.0.2.2/32",
                "action": "blacklist",
            },

            {
                "id": 2,
                "af": "ipv4",
                "src": "192.51.100.0/30",
                "sport": 53,
                "action": "whitelist",
            },

            ...
        ]
    }
]]></artwork></figure>

<t>The DOTS server confirms filter creation with an empty OK:</t>

<figure><artwork><![CDATA[
    HTTP/1.1 200 OK
    Cache-Control: no-cache
    Content-Length: 0

]]></artwork></figure>

</section>
<section anchor="put-datarootfiltersmitigation-idfilter-id" title="PUT {+dataroot}/filters/{+mitigation-id}/{+filter-id}">

<t>Filters may be updated by sending a PUT request to the specific filter URI. DOTS
servers MUST replace the existing filter atomically with the values in the PUT.</t>

<figure title="Filter Update" anchor="fig-filter-update"><artwork><![CDATA[
    PUT /dots/v1/data/filters/42/1 HTTP/1.1
    Host: dots-server.example.com
    Accept: application/json
    Content-Type: application/json
    Content-Length: NNNN

    {
        "id": 1,
        "af": "ipv4",
        "src": "192.0.2.2/32",
        "dst": "198.51.100.0/24",
        "action": "blacklist",
    }
]]></artwork></figure>

<t>The DOTS server confirms filter update with a No Content response:</t>

<figure><artwork><![CDATA[
    HTTP/1.1 204 No Content
    Cache-Control: no-cache
    Content-Length: 0

]]></artwork></figure>

</section>
<section anchor="get-datarootfiltersmitigation-id" title="GET {+dataroot}/filters/{+mitigation-id}">

<t>A GET request to the /filters endpoint on a DOTS server returns filters for a
mitigation requested by the DOTS client. The mitigation-id value MUST be the
DOTS client-generated mitigation ID used in a mitigation request previously sent
to the DOTS server over the signal channel, with the exception of the global
filter list as described below. A request listing the filters active during
a mitigation is shown below in <xref target="eg-client-get-per-mit-filter"/>:</t>

<figure title="Filter GET" anchor="eg-client-get-per-mit-filter"><artwork><![CDATA[
    GET /dots/v1/data/filters/42 HTTP/1.1
    Host: dots-server.example.com
    Accept: application/json
]]></artwork></figure>

<t>The DOTS server returns a list of active filters applied as part of the
mitigation on the DOTS client&rsquo;s behalf as in
<xref target="eg-client-get-per-mit-filter-response"/>:</t>

<figure title="Filter GET Response" anchor="eg-client-get-per-mit-filter-response"><artwork><![CDATA[
    HTTP/1.1 200 OK
    Cache-Control: no-cache
    Content-Type: application/json

    {
        "id": 42,
        "filters": [
            {
                "id": 1,
                "af": "ipv4",
                "src": "192.0.2.2/32",
                "action": "blacklist",
            },

            {
                "id": 2,
                "af": "ipv4",
                "src": "192.51.100.0/30",
                "sport": 53,
                "action": "whitelist",
            },
        ]
    }
]]></artwork></figure>

<t>If the filter list is empty, no filters are applied as part of the mitigation.</t>

</section>
</section>
<section anchor="datarootconfig" title="{+dataroot}/config">

<t>The /config data channel endpoint on a DOTS server is a read-write resource
through which a DOTS client may configure global signaling session behavior.</t>

<section anchor="get-datarootconfig" title="GET {+dataroot}/config">

<t>A GET request to the /config endpoint returns the current DOTS configuration for
the DOTS client:</t>

<figure title="DOTS Client Requesting Configuration" anchor="eg-client-cfg-get"><artwork><![CDATA[
GET /dots/v1/data/config HTTP/1.1
Host: dots-server.example.com
Accept: application/json
]]></artwork></figure>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Cache-Control:
Content-Type: application/json

{
    "config": {
        "protected-resources": {
            <alnum_id>: [
            ]
        }
    }
}

]]></artwork></figure>

</section>
<section anchor="post-datarootconfigprotected-resources" title="POST {+dataroot}/config/protected-resources/">

<t>TBD</t>

</section>
</section>
<section anchor="data-channel-resources-serialization" title="Serialization">

<t>Resource data is exchanged between DOTS client in a serialized format.
Implementations MUST support JSON <xref target="RFC7159"></xref> serialization of resource data. DOTS
clients MUST advertise support for JSON-encoded data from the DOTS server
through the HTTP Accept header <xref target="RFC7231"></xref> (or an equivalent if not using HTTP),
using the MIME type defined in <xref target="RFC7159"></xref>, application/json:</t>

<figure title="DOTS Client Advertising Required Serialization" anchor="eg-client-serial1"><artwork><![CDATA[
        GET /dots/v1/data/sessions HTTP/1.1
        Host: dots-server.example.com
        Accept: application/json
]]></artwork></figure>

<t>Implementations MAY offer additional serialization formats as well. DOTS clients
MAY advertise support for additional serialization formats in requests to the
DOTS server through the HTTP Accept header <xref target="RFC7231"></xref> (or an equivalent if not
using HTTP), as shown in the example HTTP/1.1 request below:</t>

<figure title="DOTS Client Supporting Additional Serializations" anchor="eg-client-serial2"><artwork><![CDATA[
        GET /dots/v1/data/sessions HTTP/1.1
        Host: dots-server.example.com
        Accept: application/json; q=0.5, application/cbor
]]></artwork></figure>

<t>If a DOTS server does not support the media types in the DOTS client&rsquo;s Accept
header (or its equivalent), the DOTS server MUST respond with an status code
indicating an error in the client request. In HTTP deployments, the DOTS server
MUST return the 415 Unsupported Media Type error code defined in <xref target="RFC7231"></xref>. A
DOTS client request lacking indicated support for application/json content
suggests an invalid or malicious client implementation. After sending the 415
error response, DOTS servers SHOULD terminate the data channel connection with
the invalid client.</t>

</section>
<section anchor="data-channel-resources-caching" title="Caching">

<t>DOTS server responses sent over the DOTS data channel MUST NOT be cached by the
DOTS client. DOTS server implementations therefore MUST include in responses
a Cache-Control header with a value of &ldquo;no-cache&rdquo; <xref target="RFC7234"></xref>.</t>

</section>
</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<section anchor="data-channel-security" title="Data Channel Security">

<t>The DOTS data channel acts as a management plane for DOTS signaling sessions.
As discussed in the security considerations of <xref target="I-D.ietf-dots-architecture"></xref>, an
attacker with control over data channel may be able to blacklist or rate-limit
any flows under the administrative control of the DOTS client. Extra care must
therefore be taken when authenticating and authorizing the data channel.</t>

<t>DOTS server operators SHOULD enforce access control policies restricting which
clients are able to contact DOTS servers.</t>

</section>
<section anchor="signal-channel-security" title="Signal Channel Security">

<t>The DOTS signal channel controls mitigation request and withdrawal and as such
care must be taken to protect against concerns outlined in the security
considerations of <xref target="I-D.ietf-dots-architecture"></xref>.</t>

</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC0768;
&RFC0791;
&RFC0793;
&RFC2119;
&RFC2460;
&RFC2784;
&RFC3031;
&RFC5405;
&RFC5246;
&RFC5952;
&RFC6555;
&RFC6698;
&RFC7030;
&RFC7159;
&RFC7230;
&RFC7231;
&RFC7234;
&RFC7540;
&I-D.ietf-dots-architecture;
&I-D.ietf-dots-requirements;
&I-D.hamilton-quic-transport-protocol;
&I-D.rescorla-tls-dtls13;
<reference anchor="PROTOBUF" target="https://developers.google.com/protocol-buffers/">
  <front>
    <title>Protocol Buffers</title>
    <author >
      <organization>Google, Inc.</organization>
    </author>
    <date year="2016"/>
  </front>
  <format type="HTML" target="https://developers.google.com/protocol-buffers/"/>
</reference>
<reference anchor="REST" target="http://www.ics.uci.edu/~fielding/pubs/dissertation/fielding_dissertation.pdf">
  <front>
    <title>Architectural Styles and the Design of Network-based Software Architectures</title>
    <author initials="R." surname="Fielding" fullname="Roy Thomas Fielding">
      <organization>University of California, Irvine</organization>
    </author>
    <date year="2000"/>
  </front>
  <seriesInfo name="Ph.D." value="Dissertation, University of California, Irvine"/>
  <format type="PDF" target="http://www.ics.uci.edu/~fielding/pubs/dissertation/fielding_dissertation.pdf"/>
</reference>


    </references>

    <references title='Informative References'>

&RFC1518;
&RFC1519;
&RFC4559;
&RFC5575;
&RFC7617;
<reference anchor="CLOUDSIGNAL" target="https://www.arbornetworks.com/cloud-signaling-a-faster-automated-way-to-mitigate-ddos-attacks">
  <front>
    <title>Cloud Signaling: A Faster, Automated Way to Mitigate DDoS Attacks</title>
    <author >
      <organization>Arbor Networks, Inc.</organization>
    </author>
    <date year="2011"/>
  </front>
  <format type="HTML" target="https://www.arbornetworks.com/cloud-signaling-a-faster-automated-way-to-mitigate-ddos-attacks"/>
</reference>
<reference anchor="COMMUNITYFS" target="https://www.cymru.com/jtk/misc/community-fs.html">
  <front>
    <title>Community FlowSpec</title>
    <author >
      <organization>Team Cymru, Inc.</organization>
    </author>
    <date year="2011"/>
  </front>
  <format type="HTML" target="https://www.cymru.com/jtk/misc/community-fs.html"/>
</reference>
<reference anchor="OPENHYBRID" target="http://www.verisign.com/en_US/security-services/ddos-protection/open-api/index.xhtml">
  <front>
    <title>Verisign OpenHybrid</title>
    <author >
      <organization>Verisign, Inc.</organization>
    </author>
    <date year="2016"/>
  </front>
  <format type="HTML" target="http://www.verisign.com/en_US/security-services/ddos-protection/open-api/index.xhtml"/>
</reference>
<reference anchor="WISR" target="https://www.arbornetworks.com/images/documents/WISR2016_EN_Web.pdf">
  <front>
    <title>Worldwide Infrastructure Security Report</title>
    <author >
      <organization>Arbor Networks, Inc.</organization>
    </author>
    <date year="2016"/>
  </front>
  <format type="PDF" target="https://www.arbornetworks.com/images/documents/WISR2016_EN_Web.pdf"/>
</reference>


    </references>



  </back>
</rfc>

